#!ruby -Ks

$:.unshift('..')
require 'test/unit'
require 'property_file.rb'

class TestPropertyFile < Test::Unit::TestCase
	include PropertyFile

	def test_read_property001
		contents=read_property('data/common.properties')
		assert_equal(Hash,contents.class)
		assert_equal('jpartner-release.jar',contents['jar.release.name'])
		assert_equal('jp/go/soumu/jpartner/ant/antlib.xml',contents['jar.release.antlib'])
		assert_equal('Cp943c',contents['encoding'])
		assert_equal('lf',contents['text.eol'])
		assert_equal('jp.go.soumu.jpartner',contents['pkg.name.prefix'])
		assert_equal('jp/go/soumu/jpartner',contents['pkg.dir.prefix'])
		assert_equal('jp.go.soumu.jpartctrl',contents['pkg.ctrl.name.prefix'])
		assert_equal('jp/go/soumu/jpartctrl',contents['pkg.ctrl.dir.prefix'])
		assert_equal('jp.go.soumu.partner',contents['pkg.nttd.name.prefix'])
		assert_equal('jp/go/soumu/partner',contents['pkg.nttd.dir.prefix'])
		assert_equal('package_info.properties',contents['rpkg.info'])
		assert_equal('permission.txt',contents['rpkg.permission'])
		assert_equal('filelist.txt',contents['rpkg.filelist'])
		assert_equal('overwrite_filelist.txt',contents['rpkg.filelist.ow'])
		assert_equal('rename.properties',contents['rpkg.rename'])
		assert_equal('libraries',contents['prj.libs'])
		assert_equal('jpartner-jars',contents['prj.jp-jars'])
		assert_equal('jpartctrl',contents['prj.jp-ctrl'])
		assert_equal('JRP_BAP',contents['prj.bap'])
		assert_equal('${wt.common.prj.it}',contents['prj.wt-common'])
		assert_equal('${dir.common.prop}/was',contents['dir.common.prop.was'])
		assert_equal('${dir.common.prop}/classpath',contents['dir.common.prop.cp'])
		assert_equal('${dir.common.prop}/jar',contents['dir.common.prop.jar'])
		assert_equal('${dir.common.prop}/lib',contents['dir.common.prop.lib'])
		assert_equal('${dir.common.prop}/diff',contents['dir.common.prop.diff'])
		assert_equal('JavaSource',contents['dir.common.prj.src'])
		assert_equal('usr/WebSphere/AppServer/installedApps/wsnetwork',contents['path.prefix.was.apps'])
		assert_equal('usr/WebSphere/AppServer/config/cells/wsnetwork/applications',contents['path.prefix.was.conf'])
		assert_equal('deployments',contents['path.suffix.was.conf'])
		assert_equal('usr/WebSphere/DeploymentManager/config/cells/wsnetwork/applications',contents['path.prefix.was.dm'])
		assert_equal('deployments',contents['path.suffix.was.dm'])
		assert_equal('/var/ant/cvs.properties',contents['prop.common.cvs'])
		assert_equal('${dir.common.prop}/cvs-server.properties',contents['prop.common.cvs-server'])
		assert_equal('${dir.common.prop}/compile.properties',contents['prop.common.compile'])
		assert_equal('${dir.common.prop.was}/metadataEar.includes',contents['prop.common.was.metadata.ear'])
		assert_equal('${dir.common.prop.was}/metadataWar.includes',contents['prop.common.was.metadata.war'])
		assert_equal('${dir.common.prop.cp}/mqstar_cp.includes',contents['cp.mqstar.inc'])
		assert_equal('${dir.common.prop.cp}/mqstar_cp.excludes',contents['cp.mqstar.exc'])
		assert_equal('${dir.common.prop.cp}/shokuinweb_cp.includes',contents['cp.shokuinweb.inc'])
		assert_equal('${dir.common.prop.cp}/shokuinweb_cp.excludes',contents['cp.shokuinweb.exc'])
		assert_equal('${dir.common.prop.cp}/formwave_cp.includes',contents['cp.formwave.inc'])
		assert_equal('${dir.common.prop.cp}/formwave_cp.excludes',contents['cp.formwave.exc'])
		assert_equal('${dir.common.prop.cp}/webtribe_cp.includes',contents['cp.webtribe.inc'])
		assert_equal('${dir.common.prop.cp}/webtribe_cp.excludes',contents['cp.webtribe.exc'])
		assert_equal('${dir.common.prop.lib}/mqstar_lib.includes',contents['mqstar.lib.inc'])
		assert_equal('${dir.common.prop.lib}/mqstar_lib.excludes',contents['mqstar.lib.exc'])
		assert_equal('${dir.common.prop.lib}/mqstar_jar.includes',contents['mqstar.jar.inc'])
		assert_equal('${dir.common.prop.lib}/mqstar_jar.excludes',contents['mqstar.jar.exc'])
		assert_equal('${dir.common.prop.lib}/mqstar_conf.includes',contents['mqstar.conf.inc'])
		assert_equal('${dir.common.prop.lib}/mqstar_conf.excludes',contents['mqstar.conf.exc'])
		assert_equal('${dir.common.prop.lib}/shokuinweb_lib.includes',contents['shokuinweb.lib.inc'])
		assert_equal('${dir.common.prop.lib}/shokuinweb_lib.excludes',contents['shokuinweb.lib.exc'])
		assert_equal('${dir.common.prop.lib}/shokuinweb_jar.includes',contents['shokuinweb.jar.inc'])
		assert_equal('${dir.common.prop.lib}/shokuinweb_jar.excludes',contents['shokuinweb.jar.exc'])
		assert_equal('${dir.common.prop.lib}/formwave_lib.includes',contents['formwave.lib.inc'])
		assert_equal('${dir.common.prop.lib}/formwave_lib.excludes',contents['formwave.lib.exc'])
		assert_equal('${dir.common.prop.lib}/formwave_jar.includes',contents['formwave.jar.inc'])
		assert_equal('${dir.common.prop.lib}/formwave_jar.excludes',contents['formwave.jar.exc'])
		assert_equal('${dir.common.prop.lib}/mqhub_lib.includes',contents['mqhub.lib.inc'])
		assert_equal('${dir.common.prop.lib}/mqhub_lib.excludes',contents['mqhub.lib.exc'])
		assert_equal('${dir.common.prop.lib}/mqhub_jar.includes',contents['mqhub.jar.inc'])
		assert_equal('${dir.common.prop.lib}/mqhub_jar.excludes',contents['mqhub.jar.exc'])
		assert_equal('${dir.common.base}/cvs.xml',contents['build.common.cvs'])
		assert_equal('${dir.common.base}/compile.xml',contents['build.common.compile'])
		assert_equal('${dir.common.base}/archive.xml',contents['build.common.archive'])
		assert_equal('${dir.common.base}/permission.xml',contents['build.common.permission'])
		assert_equal('${dir.common.base}/remote.xml',contents['build.common.remote'])
		assert_equal('${dir.common.base}/util.xml',contents['build.common.util'])
		assert_equal('QUEUE-MANAGER-NAME',contents['token.qm'])
		assert_equal('QUEUE-MANAGER-HUB',contents['token.qm.hub'])
		assert_equal('QUEUE-MANAGER-DB',contents['token.qm.db'])
		assert_equal('CONNECT-HOST',contents['token.connecthost'])
		assert_equal('CONNECT-CHANNEL',contents['token.connectchannel'])
		assert_equal('${prj.pkginfo}',contents['cvs.checkout.always-newest'])
		assert_equal('${prj.lib.list}',contents['cvs.checkout.tag-ignore'])
	end

	def test_read_property_002
		contents=read_property('data/JPARTNER.P.PW.PGM00-1.tar_conf')
		assert_equal('JPARTNER.P.PW.PGM00-1',contents['FILESET'])
		assert_equal('2.1.0.0',contents['VERSION'])
		assert_equal('RPSV1E91A',contents['SERVERLIST'])
		assert_equal('PARTNER control application modules.',contents['COMMENT'])
		assert_equal('PARTNER',contents['AUTHOR'])
		assert_equal('',contents['PREREQ'])
		assert_equal('',contents['PRE_INSTALL'])
		assert_equal('',contents['POST_INSTALL'])
		assert_equal('',contents['PRE_UNINSTALL'])
		assert_equal('',contents['POST_UNINSTALL'])
	end

	def test_read_property_003
		contents=read_property('data/package_info.properties')
		assert_equal('JPShinseiDB-conf',contents['rpkg.conf.prj'])
		assert_equal('JPShinsei',contents['rpkg.source.prj.list'])
		assert_equal('QMJPSQ0C20A2',contents['rpkg.prj.qm.name'])
		assert_equal('JPSQ0C20A',contents['rpkg.mqfw.rule.connecthost'])
		assert_equal('SVRCON.QMJPSQ0C20A2',contents['rpkg.mqfw.rule.connectchannel'])
		assert_equal('systemA',contents['rpkg.system.list'])
		assert_equal('JPARTNER.A.DBBatch',contents['rpkg.systemA.rpkg.name'])
		assert_equal('QMJPSQ0C20A2',contents['rpkg.systemA.qm.name'])
		assert_equal('${pkg.dir.prefix}/appl/mqstar/a/**/*.java, ${pkg.dir.prefix}/appl/sql/a/**/*.java, ${pkg.dir.prefix}/appl/util/a/**/*.java, ${pkg.dir.prefix}/appl/mqstar/r1/**/*.java, ${pkg.dir.prefix}/appl/sql/r1/**/*.java, ${pkg.dir.prefix}/appl/util/r1/**/*.java, ${pkg.dir.prefix}/appl/mqstar/t/**/*.java, ${pkg.dir.prefix}/appl/sql/t/**/*.java, ${pkg.dir.prefix}/appl/util/t/**/*.java, ${pkg.dir.prefix}/appl/mqstar/z/**/*.java, ${pkg.dir.prefix}/appl/sql/z/**/*.java, ${pkg.dir.prefix}/appl/util/z/**/*.java',contents['rpkg.JPShinsei.compile.inc'])
		assert_equal('appl-mqstar-a.jar,appl-common-a.jar',contents['rpkg.subsys.jar.list'])
		assert_equal('${prj.jp-jars}/appl-util/appl-multi-dshinsei.jar, ${prj.jp-jars}/appl-util/appl-multi-touroku.jar, ${prj.jp-jars}/appl-common/appl-mqstar-z.jar, ${prj.jp-jars}/appl-util/appl-multi-util.jar, ${prj.jp-jars}/appl-util/appl-multi-shinsei.jar',contents['rpkg.depend.jar.list'])
		assert_equal('JPARTNER.A.DBBatch.VF',contents['release.package.vf'])
	end
end
